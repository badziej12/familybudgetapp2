schema {
    query: Query
    mutation: Mutation
}


type Mutation{
    createUser(nickname: String!, email: String!,
     password: String! first_name: String, last_name: String, age: Int, balance: Float, created_at: String): UserResult!
    updateUser(id: ID!, nickname: String, email: String,
     password: String, first_name: String, last_name: String, age: Int, balance: Float): UserResult!
    deleteUser(id: ID): UserResult!
    newTransaction(date: String, title: String!, recipient_id: ID!,
    sender_id: ID!, ammount: Float!, category_id: ID!):TransactionResult!
    createFamily(name: String!, member_id: ID!): FamilyResult!
    deleteFamily(id: ID): FamilyResult!
    createCategory(name: String!): CategoryResult!
}

type User {
    id: ID!
    nickname: String!
    email: String!
    password: String!
    first_name: String!
    last_name: String!
    age: Int!
    wallet_id: String!
    wallet: Wallet!
    created_at: String!
    family: [Family]
}

type Transaction{
    id: ID!
    date: String!
    title: String!
    recipient: Wallet!
    recipient_id: String!
    sender: Wallet!
    sender_id: String!
    ammount: Float!
    category_id: String!
    category: Category!
}

type Family{
    id: ID!
    name: String!
    goal_id: String
    goal: [Goal]
    wallet_id: String!
    wallet: Wallet!
    members: [User!] 
}

type Category{
    id: ID!
    name: String!
    transaction: [Transaction]
}

type Wallet{
    id: ID!
    balance: Float!
    users: User!
    families: Family!
    outcome: [Transaction]
    income: [Transaction]
}

type Goal{
    id: ID!
    name: String!
    price: Float!
    category_id: String!
    category: Category!
    family: Family!
}

type TransactionResult {
    success: Boolean!
    errors: [String]
    transaction: Transaction
}

type TransactionsResult {
    success: Boolean!
    errors: [String]
    transactions: [Transaction]
}

type UserResult {
    success: Boolean!
    errors: [String]
    user: User
}

type UsersResult {
    success: Boolean!
    errors: [String]
    users: [User]
}

type FamilyResult{
    success: Boolean!
    errors: [String]
    family: Family
}

type FamiliesResult{
    success: Boolean!
    errors: [String]
    families: [Family]
}

type CategoryResult{
    success: Boolean!
    errors: [String]
    category: Category
}

type CategoriesResult{
    success: Boolean!
    errors: [String]
    categories: [Category]
}

type GoalResult{
    success: Boolean!
    errors: [String]
    goal: Goal
}

type GoalsResult{
    success: Boolean!
    errors: [String]
    goals: [Goal]
}

type WalletsResult{
    success: Boolean!
    errors: [String]
    wallets: [Wallet]
}

type WalletResult{
    success: Boolean!
    errors: [String]
    wallet: Wallet
}




type Query {
    listUsers: UsersResult!
    getUser(id: ID!): UserResult!
    listTransactions: TransactionsResult!
    getTransaction(id:ID!): TransactionResult!
    listFamilies: FamiliesResult!
    getFamily(id:ID!): FamilyResult!
    listCategories: CategoriesResult!
    getCategory(id: ID!): CategoryResult!
    listGoals: GoalsResult!
    getGoal(id: ID!): GoalResult!
    listWallets: WalletsResult!
    getWallet(id: ID!): WalletResult!
}

