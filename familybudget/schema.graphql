schema {
    query: Query
    mutation: Mutation
}


type Mutation{
    createUser(nickname: String!, email: String!, password: String!): UserResult!
    updateUser(id: ID!, nickname: String, email: String, password: String): UserResult!
    deleteUser(id: ID!): UserResult!
    newTransaction(title: String!, wallet_id: ID!,
    ammount: Float!, category_id: ID!, goal_id: ID):TransactionResult!
    createFamily(name: String!, member_id: ID!): FamilyResult!
    deleteFamily(id: ID!): FamilyResult!
    createCategory(name: String!): CategoryResult!
    createGoal(deadline: String! name: String!, price: Float!, description: String, paid: Boolean!,wallet_id: ID, category_id: Int!, family_id: ID): GoalResult!
    createWallet(balance: Float!, month: Int!, user_id: ID!, year: Int!): WalletResult!
    deleteCategory(id: ID!): CategoryResult!
    deleteWallet(id: ID!): WalletResult!
    deleteGoal(id: ID!): GoalResult!
    updateWallet(id: ID!, balance: Float, month: Int, year: Int): WalletResult!
    updateGoal(id: ID!, deadline: String, name: String, price: Float, description: String, paid: Boolean): GoalResult!
    addFamilyMember(member_id: ID!, family_id: ID!): MemberResult!
    deleteFamilyMember(user_id: ID!, family_id: ID!): MemberResult!
    deleteTransaction(id: ID!): TransactionResult!
}

type User {
    id: ID!
    nickname: String!
    email: String!
    password: String!
    wallet: [Wallet]
    created_at: String!
    families: [Member]
}

type Transaction{
    id: ID!
    date: String!
    title: String!
    wallet_id: ID!
    wallet: Wallet!
    ammount: Float!
    category_id: String!
    category: Category!
    goal_id: String
    goal: Goal
}

type Family{
    id: ID!
    name: String!
    goals: [Goal]
    members: [Member!] 
}

type Category{
    id: ID!
    name: String!
    transaction: [Transaction]
}

type Member{
    user_id: String!
    family_id: String!
    user: User!
    family: Family!
}

type Wallet{
    id: ID!
    balance: Float!
    month: Int!
    year: Int!
    user_id: ID!
    user: User!
    goals: [Goal]
    transaction: [Transaction]
}

type Goal{
    id: ID!
    created_at: String!
    deadline: String!
    name: String!
    price: Float!
    description: String
    paid: Boolean!
    category_id: String!
    category: Category!
    wallet_id: ID
    wallet: Wallet
    family_id: String
    family: Family
}

type MemberResult{
    success: Boolean!
    errors: [String]
    member: Member
}

type MembersResult{
    success: Boolean!
    errors: [String]
    members: [Member]
}

type TransactionResult {
    success: Boolean!
    errors: [String]
    transaction: Transaction
}

type TransactionsResult {
    success: Boolean!
    errors: [String]
    transactions: [Transaction]
}

type UserResult {
    success: Boolean!
    errors: [String]
    user: User
}

type UsersResult {
    success: Boolean!
    errors: [String]
    users: [User]
}

type FamilyResult{
    success: Boolean!
    errors: [String]
    family: Family
}

type FamiliesResult{
    success: Boolean!
    errors: [String]
    families: [Family]
}

type CategoryResult{
    success: Boolean!
    errors: [String]
    category: Category
}

type CategoriesResult{
    success: Boolean!
    errors: [String]
    categories: [Category]
}

type GoalResult{
    success: Boolean!
    errors: [String]
    goal: Goal
}

type GoalsResult{
    success: Boolean!
    errors: [String]
    goals: [Goal]
}

type WalletsResult{
    success: Boolean!
    errors: [String]
    wallets: [Wallet]
}

type WalletResult{
    success: Boolean!
    errors: [String]
    wallet: Wallet
}




type Query {
    listUsers: UsersResult!
    getUser(id: ID!): UserResult!
    listTransactions: TransactionsResult!
    getTransaction(id:ID!): TransactionResult!
    listFamilies: FamiliesResult!
    getFamily(id:ID!): FamilyResult!
    listCategories: CategoriesResult!
    getCategory(id: ID!): CategoryResult!
    listGoals: GoalsResult!
    listMembers: MembersResult!
    getGoal(id: ID!): GoalResult!
    listWallets: WalletsResult!
    getWallet(id: ID!): WalletResult!
    getMember(user_id: ID!, family_id: ID!): MemberResult!
}

